import React, { Component } from 'react';

class LoginForm extends Component {
    // Initialize state variables
    constructor(props) {
        super(props);
        this.state = {
            username: '',
            password: '',
        }
    }

    // Handler for when the text changes in the input fields
    handleChange = (e) => {
        let updatedState = {}
        updatedState[e.target.name] = e.target.value;
        this.setState(updatedState);
    };

    // Handler to check if username and password are correct
    handleSubmit = (e) => {
        e.preventDefault();
        //Call your authentication function here
        console.log(this.state.username, this.state.password);
    };

    // Render the HTML of your component
    render() {
        return (
            <form>
                <h3 className="header-text"> Log In </h3>
                <label>Username:</label>
                <input type="text"
                       name="username"
                       className="input-field"
                       placeholder="Enter username"
                       value={this.state.username}
                       onChange={this.handleChange}
                />
                <label>Password:</label>
                <input type="password"
                       name="password"
                       className="input-field"
                       placeholder="Enter password"
                       value={this.state.password}
                       onChange={this.handleChange}
                />
                <button type="submit"
                        className="submit-button"
                        onClick={this.handleSubmit}>
                    Submit
                </button>
            </form>
        )
    }
};

export default LoginForm;
Then, add logic to check if the entered username and password is valid or not. Here is an example approach which checks it against a list of valid credentials:test

Copy
Insert
New
// Logic to check if the entered username and password is valid
const validCredentials = [
    { user: 'user1', pass: 'pass1' },
    { user: 'user2', pass: 'pass2' },
    // Add more users and passwords here
];

function authenticateUser(user, pass) {
    const userCreds = validCredentials.filter(cred => (
        cred.user === user && cred.pass === pass
    ));

    return userCreds.length !== 0;
}
Now call the authenticateUser() function in your handleSubmit() method as follows:

Copy
Insert
New
// Handler to check if username and password are correct
handleSubmit = (e) => {
    e.preventDefault();
    const isAuthenticated = authenticateUser(this.state.username, this.state.password);

    if (isAuthenticated) {
        //TODO: redirect to home page
    } else {
        //TODO: manipulate css to display an error message
    }
};
Finally, add css in order to manipulate the UI when an invalid username or password is entered. Here is an example approach which adds a red border around the input field so that the user knows that their input is incorrect:

Copy
Insert
New
.input-field.error-input {
    border: 2px solid #FF0000;
}
Then, in your handleSubmit() method, use the following piece of code to check if the input fields have an error. If they do, then apply the class "error-input" to the input fields:

Copy
Insert
New
// Handler to check if username and password are correct
handleSubmit = (e) => {
    e.preventDefault();
    const isAuthenticated = authenticateUser(this.state.username, this.state.password);

    if (isAuthenticated) {
        //TODO: redirect to home page
    } else {
        // Get the username and password inputs
        const usernameInput = document.querySelector('input[name="username"]');
        const passwordInput = document.querySelector('input[name="password"]');

        // Check if there is an error
        if
